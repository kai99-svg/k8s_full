name: Check install tool and run lb controller

on:
  workflow_dispatch:

jobs:
  setup:
    name: Check installed tools
    
    runs-on: self-hosted
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v3
      - name: Check installed tools
        run: |
          aws eks update-kubeconfig --region us-east-1 --name my-eks-cluster
          kubectl version
          helm version
          aws --version

  install-controller:
    name: Install AWS Load Balancer Controller
    needs: setup
    runs-on: self-hosted
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name my-eks-cluster

      - name: Install service account
        run: kubectl apply -f serviceaacount.yaml

      - name: Install or Upgrade AWS Load Balancer Controller
        run: |
          helm repo add eks https://aws.github.io/eks-charts || true
          helm repo update
<<<<<<< HEAD
          helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=my-eks-cluster \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set region=us-east-1 \
            --set vpcId=vpc-0ed4ed98c03d68e2a \
            --set ingressClass=alb \
            --set subnets="{subnet-0334ac60e3ed5fcea,subnet-04606abd020eae59f,subnet-0a5b64bb7f215d79d,subnet-0f0fc4d877b9f10c6}"
=======

          if helm list -n kube-system | grep -q aws-load-balancer-controller; then
            echo "ðŸ”„ Helm release already exists. Running upgrade..."
            helm upgrade aws-load-balancer-controller eks/aws-load-balancer-controller \
              -n kube-system \
              --set clusterName=my-eks-cluster \
              --set serviceAccount.create=false \
              --set serviceAccount.name=aws-load-balancer-controller \
              --set region=us-east-1 \
              --set vpcId=vpc-00439c1ac0d5fc674 \
              --set ingressClass=alb \
              --set subnets="{subnet-01feca4e5854cd716,subnet-08146b8dd8acf5626,subnet-0b395b7f6d40d031e,subnet-08d3aa9b2f9a85d28}"
          else
            echo "ðŸš€ Installing AWS Load Balancer Controller..."
            helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
              -n kube-system \
              --set clusterName=my-eks-cluster \
              --set serviceAccount.create=false \
              --set serviceAccount.name=aws-load-balancer-controller \
              --set region=us-east-1 \
              --set vpcId=vpc-00439c1ac0d5fc674 \
              --set ingressClass=alb \
              --set subnets="{subnet-01feca4e5854cd716,subnet-08146b8dd8acf5626,subnet-0b395b7f6d40d031e,subnet-08d3aa9b2f9a85d28}"
          fi

>>>>>>> 86140d2 (added)

  deploy-grafana:
    name: Deploy Grafana via Helm
    needs: install-controller
    runs-on: self-hosted
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name my-eks-cluster

      - name: Helm install Grafana
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm install grafana bitnami/grafana -f values.yaml

  apply-ingress:
    name: Apply Ingress Config
    needs: deploy-grafana
    runs-on: self-hosted
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name my-eks-cluster

      - name: Apply Ingress YAML
        run: cd ingress && kubectl apply -f ingress.yaml
